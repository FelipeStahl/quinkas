/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.quinkas.view;

import br.com.quinkas.dao.impl.AlternativaDAOImpl;
import br.com.quinkas.dao.impl.PerguntaDAOImpl;
import br.com.quinkas.entidade.Alternativa;
import br.com.quinkas.entidade.Pergunta;
import br.com.quinkas.entidade.Questionario;
import br.com.quinkas.manter.ManterPrincipal;
import br.com.quinkas.util.CorPainel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Felipe-Sistema
 */
public class PnProfessorPergunta extends javax.swing.JPanel {

    private Questionario questionarioAtual;
    private Pergunta pergunta;
    private Integer posicao;
    List<Alternativa> alternativas;

    public PnProfessorPergunta(Questionario questionario, Integer pos) {
        initComponents();
        CorPainel altera = new CorPainel(this);
        Thread t = new Thread(altera);
        t.start();
        questionarioAtual = questionario;
        posicao = pos;
        if (posicao != null) {
            pergunta = questionarioAtual.getPerguntas().get(posicao);
            alternativas = pergunta.getAlternativas();
            this.epPergunta.setText(pergunta.getPergunta());
            this.txA.setText(pergunta.getAlternativas().get(0).getResposta());
            this.rbA.setSelected(pergunta.getAlternativas().get(0).getIsTrue());
            this.txB.setText(pergunta.getAlternativas().get(1).getResposta());
            this.rbB.setSelected(pergunta.getAlternativas().get(1).getIsTrue());
            this.txC.setText(pergunta.getAlternativas().get(2).getResposta());
            this.rbC.setSelected(pergunta.getAlternativas().get(2).getIsTrue());
            this.txD.setText(pergunta.getAlternativas().get(3).getResposta());
            this.rbD.setSelected(pergunta.getAlternativas().get(3).getIsTrue());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        epPergunta = new javax.swing.JEditorPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txD = new javax.swing.JTextField();
        txC = new javax.swing.JTextField();
        txB = new javax.swing.JTextField();
        txA = new javax.swing.JTextField();
        rbA = new javax.swing.JRadioButton();
        rbB = new javax.swing.JRadioButton();
        rbC = new javax.swing.JRadioButton();
        rbD = new javax.swing.JRadioButton();
        btSalvar = new javax.swing.JButton();
        lbPergunta = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbRetorno = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));

        setMinimumSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.GridBagLayout());

        epPergunta.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jScrollPane1.setViewportView(epPergunta);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(jScrollPane1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("A)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel4, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("B)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("C)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("D)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(txD, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(txC, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(txB, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(txA, gridBagConstraints);

        rbA.setSelected(true);
        rbA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        add(rbA, gridBagConstraints);

        rbB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        add(rbB, gridBagConstraints);

        rbC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        add(rbC, gridBagConstraints);

        rbD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        add(rbD, gridBagConstraints);

        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        add(btSalvar, gridBagConstraints);

        lbPergunta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbPergunta.setForeground(new java.awt.Color(255, 255, 255));
        lbPergunta.setText("Questão:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(lbPergunta, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/quinkas/imagem/logo_prof.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        add(jLabel1, gridBagConstraints);

        lbRetorno.setForeground(new java.awt.Color(255, 255, 255));
        lbRetorno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/quinkas/imagem/retornar.png"))); // NOI18N
        lbRetorno.setText("Retornar ");
        lbRetorno.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbRetorno.setInheritsPopupMenu(false);
        lbRetorno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbRetornoMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(lbRetorno, gridBagConstraints);

        jSpinner1.setMinimumSize(new java.awt.Dimension(50, 26));
        jSpinner1.setPreferredSize(new java.awt.Dimension(50, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(jSpinner1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Tempo (segundos)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 0.1;
        add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.weighty = 0.1;
        add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        add(filler7, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void rbAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAActionPerformed
        if (rbA.isSelected()) {
            rbB.setSelected(false);
            rbC.setSelected(false);
            rbD.setSelected(false);
        }
    }//GEN-LAST:event_rbAActionPerformed

    private void rbBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBActionPerformed
        if (rbB.isSelected()) {
            rbC.setSelected(false);
            rbD.setSelected(false);
            rbA.setSelected(false);
        }
    }//GEN-LAST:event_rbBActionPerformed

    private void rbCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCActionPerformed
        if (rbC.isSelected()) {
            rbD.setSelected(false);
            rbA.setSelected(false);
            rbB.setSelected(false);
        }
    }//GEN-LAST:event_rbCActionPerformed

    private void rbDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDActionPerformed
        if (rbD.isSelected()) {
            rbA.setSelected(false);
            rbB.setSelected(false);
            rbC.setSelected(false);
        }
    }//GEN-LAST:event_rbDActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        String teste1 = epPergunta.getText().trim();
        String teste2 = txA.getText().trim();
        String teste3 = txB.getText().trim();
        String teste4 = txC.getText().trim();
        String teste5 = txD.getText().trim();
        if (teste1.equals("") || teste2.equals("") || teste3.equals("") || teste4.equals("") || teste5.equals("")) {
            JOptionPane.showMessageDialog(this, "Preencha corretamente os campos.");
            return;
        }
        if (posicao == null) {
            try {
                PerguntaDAOImpl perguntaDao = new PerguntaDAOImpl();
                AlternativaDAOImpl alternativaDAO;
                pergunta = new Pergunta();
                pergunta.setPergunta(this.epPergunta.getText());
                pergunta.setQuestionario(questionarioAtual);
                pergunta.setId(perguntaDao.inserir(pergunta));

                alternativas = new ArrayList();
                Alternativa alternativaA = new Alternativa();
                alternativaA.setPergunta(pergunta);
                alternativaA.setResposta(txA.getText());
                alternativaA.setIsTrue(rbA.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaA.setId(alternativaDAO.inserir(alternativaA));
                alternativas.add(alternativaA);

                Alternativa alternativaB = new Alternativa();
                alternativaB.setPergunta(pergunta);
                alternativaB.setResposta(txB.getText());
                alternativaB.setIsTrue(rbB.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaB.setId(alternativaDAO.inserir(alternativaB));
                alternativas.add(alternativaB);

                Alternativa alternativaC = new Alternativa();
                alternativaC.setPergunta(pergunta);
                alternativaC.setResposta(txC.getText());
                alternativaC.setIsTrue(rbC.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaC.setId(alternativaDAO.inserir(alternativaC));
                alternativas.add(alternativaC);

                Alternativa alternativaD = new Alternativa();
                alternativaD.setPergunta(pergunta);
                alternativaD.setResposta(txD.getText());
                alternativaD.setIsTrue(rbD.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaD.setId(alternativaDAO.inserir(alternativaD));
                alternativas.add(alternativaD);
                pergunta.setAlternativas(alternativas);

                if (questionarioAtual.getPerguntas() == null) {
                    List<Pergunta> perguntas = new ArrayList();
                    perguntas.add(pergunta);
                    questionarioAtual.setPerguntas(perguntas);
                    posicao = 0;
                } else {
                    questionarioAtual.getPerguntas().add(pergunta);
                    posicao = questionarioAtual.getPerguntas().size() - 1;
                }
                retornar();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao inserir os dados no banco.");
            }
        } else {
            try {
                PerguntaDAOImpl perguntaDao = new PerguntaDAOImpl();
                AlternativaDAOImpl alternativaDAO;
                pergunta.setPergunta(this.epPergunta.getText());
                perguntaDao.alterar(pergunta);

                alternativas.get(0).setPergunta(pergunta);
                alternativas.get(0).setResposta(txA.getText());
                alternativas.get(0).setIsTrue(rbA.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaDAO.alterar(alternativas.get(0));

                alternativas.get(1).setPergunta(pergunta);
                alternativas.get(1).setResposta(txB.getText());
                alternativas.get(1).setIsTrue(rbB.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaDAO.alterar(alternativas.get(1));

                alternativas.get(2).setPergunta(pergunta);
                alternativas.get(2).setResposta(txC.getText());
                alternativas.get(2).setIsTrue(rbC.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaDAO.alterar(alternativas.get(2));

                alternativas.get(3).setPergunta(pergunta);
                alternativas.get(3).setResposta(txD.getText());
                alternativas.get(3).setIsTrue(rbD.isSelected());
                alternativaDAO = new AlternativaDAOImpl();
                alternativaDAO.alterar(alternativas.get(3));
                retornar();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao alterar os dados no banco." + e.getMessage());
            }
        }
    }//GEN-LAST:event_btSalvarActionPerformed

    private void lbRetornoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbRetornoMousePressed
        retornar();
    }//GEN-LAST:event_lbRetornoMousePressed

    private void retornar() {
        PnProfessorPerguntas pnl = new PnProfessorPerguntas(questionarioAtual);
        ManterPrincipal.getPrincipal().setContentPane(pnl);
        ManterPrincipal.getPrincipal().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSalvar;
    private javax.swing.JEditorPane epPergunta;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel lbPergunta;
    private javax.swing.JLabel lbRetorno;
    private javax.swing.JRadioButton rbA;
    private javax.swing.JRadioButton rbB;
    private javax.swing.JRadioButton rbC;
    private javax.swing.JRadioButton rbD;
    private javax.swing.JTextField txA;
    private javax.swing.JTextField txB;
    private javax.swing.JTextField txC;
    private javax.swing.JTextField txD;
    // End of variables declaration//GEN-END:variables
}
